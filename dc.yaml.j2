apiVersion: v1
kind: List
items:
{% for index in range(app_first | int, app_first | int + batch_apps | int) %}
{%   if index % 5 == 1 %}
{%     set app_variant = "canary" %}
{%   else %}
{%     set app_variant = "stable" %}
{%   endif %}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: {{ app_label }}
    name: app-{{ index }}
    namespace: {{ namespace }}
  spec:
    replicas: {{ pods_per_app }}
    strategy:
      type: Recreate
    template:
      metadata:
# Automatic injection will be disabled by default, we selectively enable that for app pods.
# Otherwise, in Openshift even the builder and deployer pods would get the sidecar injected.
# Alternative solution: https://bani.com.br/2018/09/istio-sidecar-injection-enabling-automatic-injection-adding-exceptions-and-debugging/
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: {{ app_label }}
          batch: "batch-{{ app_first }}"
          deploymentconfig: app-{{ index }}
          app.variant:  {{ app_variant }}
      spec:
        nodeSelector:
{% if backend_node is defined %}
          kubernetes.io/hostname: {{ backend_node }}
{% endif%}
        containers:
        - image: {{ docker_registry }}/{{ namespace }}/mannequin:latest
          imagePullPolicy: Always
          name: mannequin
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: VARIANT
            value: {{ app_variant }}
          - name: JAVA_OPTIONS
            value: >
              -Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            exec:
              command:
                - curl
                - localhost:8080/
              initialDelaySeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames: [ mannequin ]
        from:
          kind: ImageStreamTag
          name: mannequin:latest
      type: ImageChange
{% endfor %}
