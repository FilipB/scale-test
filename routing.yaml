apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: scale-test
parameters:
- name: WILDCARD_DOMAIN
  description: "Wildcard domain that will be redirected to Istio Ingress Gateway"
  value: istio.router.default.svc.cluster.local
- name: NAMESPACE
  description: "Test namespace"
  value: mannequin-test
- name: ISTIO_NAMESPACE
  description: "Test namespace"
  value: istio-system
- name: APP_LABEL
  description: Value for 'app' label on the pods.
  value: app
objects:
- apiVersion: networking.istio.io/v1alpha3
  kind: Gateway
  metadata:
    name: app-gateway
    namespace: ${NAMESPACE}
  spec:
    selector:
      istio: ingressgateway # use Istio default gateway implementation
    servers:
    - hosts:
      # Catch-all route not allowed in Maistra
      # Wildcard routes not possible in OCP 4.1
      - "app.${WILDCARD_DOMAIN}"
      port:
        name: https
        number: 443
        protocol: HTTPS
      tls:
        mode: SIMPLE
        # These keys are mounted from the secret istio-system/istio-ingressgateway-certs
        privateKey: /etc/istio/ingressgateway-certs/tls.key
        serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
    # Redirect non-encrypted traffic to port 443
    - hosts:
      # Wildcard routes not possible in OCP 4.1
      - "app.${WILDCARD_DOMAIN}"
      port:
        name: http
        number: 80
        protocol: HTTP
      tls:
        httpsRedirect: true
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_LABEL}
    name: app
    namespace: ${NAMESPACE}
  spec:
    ports:
    # The port number has to be hardcoded as templates don't allow
    # integer parameters and definition with string port fail with
    #    Error from server: unrecognized type: int32
    - name: http-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: db-5432
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: ${APP_LABEL}
    sessionAffinity: None
    type: ClusterIP
# This virtual service requires any request to have x-variant set to either
# 'stable', 'canary' or 'mirror' (otherwise the request raturns 404)
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: variant
    namespace: ${NAMESPACE}
  spec:
    hosts:
    - app.${WILDCARD_DOMAIN} # for external routing
    - app # for internal routing within NAMESPACE
    gateways:
    - app-gateway # for external routing
    - mesh # for internal routing
    http:
    - match:
      - headers:
          x-variant:
            exact: stable
      route:
      - destination:
          host: app
          port:
            number: 8080
          subset: stable
    - match:
      - headers:
          x-variant:
            exact: canary
      route:
      - destination:
          host: app
          port:
            number: 8080
          subset: canary
    - match:
      - headers:
          x-variant:
            exact: mirror
      route:
      - destination:
          host: app
          port:
            number: 8080
          subset: stable
      mirror:
        host: app
        port:
          number: 8080
        subset: canary
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    name: variant
    namespace: ${NAMESPACE}
  spec:
    host: app.${NAMESPACE}.svc.cluster.local
    trafficPolicy:
      loadBalancer:
        simple: RANDOM
      connectionPool:
        http:
          http1MaxPendingRequests: 10000
          http2MaxRequests: 10000
        tcp:
          maxConnections: 10000
      portLevelSettings:
      - port:
          number: 8080
        tls:
          mode: ISTIO_MUTUAL
        # It seems that defining port-level settings sets the connection pool
        # settings to default values, so we need to repeat it here.
        connectionPool:
          http:
            http1MaxPendingRequests: 10000
            http2MaxRequests: 10000
          tcp:
            maxConnections: 10000
    subsets:
    - name: stable
      labels:
        app.variant: stable
    - name: canary
      labels:
        app.variant: canary
# Global policy requiring communication to be TLS-encrypted
- apiVersion: authentication.istio.io/v1alpha1
  kind: Policy
  metadata:
    name: default
    namespace: ${NAMESPACE}
  spec:
    peers:
    - mtls: {}
# Exception for the policy above on DB port
- apiVersion: authentication.istio.io/v1alpha1
  kind: Policy
  metadata:
    name: app-db
    namespace: ${NAMESPACE}
  spec:
    peers: []
    targets:
    - name: app
      ports:
      - number: 5432