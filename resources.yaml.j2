apiVersion: v1
kind: List
items:
- apiVersion: networking.istio.io/v1alpha3
  kind: VirtualService
  metadata:
    name: app-paths
    namespace: {{ namespace }}
  spec:
    hosts:
    - app.{{ wildcard_domain }}
    - app.{{ namespace }}.svc.cluster.local
    gateways:
    - app-gateway.istio-system.svc.cluster.local
    http:
{% for index in range(1, num_apps | int + 1) %}
    - match:
      - uri:
          prefix: /app-{{ index }}/
      rewrite:
        uri: /
      route:
      - destination:
          host: app
          subset: app-{{ index }}
{% endfor %}
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    name: app-subsets
    namespace: {{ namespace }}
  spec:
    host: app.{{ namespace }}.svc.cluster.local
    trafficPolicy:
      loadBalancer:
        simple: RANDOM
    subsets:
{% for index in range(1, num_apps | int + 1) %}
    - name: app-{{ index }}
      labels:
        deploymentconfig: app-{{ index }}
{% endfor %}
# Automatic injection will be disabled by default, we selectively enable that for app pods.
# Otherwise, in Openshift even the builder and deployer pods would get the sidecar injected.
# Alternative solution: https://bani.com.br/2018/09/istio-sidecar-injection-enabling-automatic-injection-adding-exceptions-and-debugging/
{% for index in range(1, num_apps | int + 1) %}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: {{ app_label }}
    name: app-{{ index }}
    namespace: {{ namespace }}
  spec:
    replicas: {{ pods_per_app }}
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: {{ app_label }}
          deploymentconfig: app-{{ index }}
      spec:
        nodeSelector:
          kubernetes.io/hostname: {{ backend_node }}
        containers:
        - image: {{ docker_registry }}/{{ namespace }}/mannequin:latest
          imagePullPolicy: Always
          name: mannequin
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            exec:
              command:
                - curl
                - localhost:8080/
              initialDelaySeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames: [ mannequin ]
        from:
          kind: ImageStreamTag
          name: mannequin:latest
      type: ImageChange
{% endfor %}